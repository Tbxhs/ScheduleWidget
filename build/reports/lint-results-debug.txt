/Users/james/dev/NearScheduleWidget/app/src/main/AndroidManifest.xml:8: Warning: The attribute android:allowBackup is deprecated from Android 12 and the default allows backup [DataExtractionRules]
        android:allowBackup="true"
                             ~~~~

   Explanation for issues of type "DataExtractionRules":
   Before Android 12, the attributes android:allowBackup and
   android:fullBackupContent were used to configure all forms of backup,
   including cloud backups, device-to-device transfers and adb backup.

   In Android 12 and higher, these attributes have been deprecated and will
   only apply to cloud backups. You should instead use the attribute
   android:dataExtractionRules, specifying an @xml resource that configures
   which files to back up, for cloud backups and for device-to-device
   transfers, separately. If your minSdkVersion supports older versions,
   you'll still want to specify an android:fullBackupContent resource if the
   default behavior is not right for your app.

   https://developer.android.com/about/versions/12/backup-restore#xml-changes
   https://goo.gle/DataExtractionRules

/Users/james/dev/NearScheduleWidget/app/src/main/res/mipmap-anydpi-v26: Warning: This folder configuration (v26) is unnecessary; minSdkVersion is 31. Merge all the resources in this folder into mipmap-anydpi. [ObsoleteSdkInt]

   Explanation for issues of type "ObsoleteSdkInt":
   This check flags version checks that are not necessary, because the
   minSdkVersion (or surrounding known API level) is already at least as high
   as the version checked for.

   Similarly, it also looks for resources in -vNN folders, such as values-v14
   where the version qualifier is less than or equal to the minSdkVersion,
   where the contents should be merged into the best folder.

/Users/james/dev/NearScheduleWidget/app/src/main/res/xml/provider_paths.xml:2: Warning: The resource R.xml.provider_paths appears to be unused [UnusedResources]
<paths>
^
/Users/james/dev/NearScheduleWidget/app/src/main/res/values/strings.xml:4: Warning: The resource R.string.perm_needed appears to be unused [UnusedResources]
    <string name="perm_needed">请授予“读取日历”权限以显示日程。</string>
            ~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/values/strings.xml:5: Warning: The resource R.string.open_settings appears to be unused [UnusedResources]
    <string name="open_settings">打开设置</string>
            ~~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/values/strings.xml:6: Warning: The resource R.string.force_update appears to be unused [UnusedResources]
    <string name="force_update">手动刷新小组件</string>
            ~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

/Users/james/dev/NearScheduleWidget/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml:2: Warning: The application adaptive icon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^

   Explanation for issues of type "MonochromeLauncherIcon":
   If android:roundIcon and android:icon are both in your manifest, you must
   either remove the reference to android:roundIcon if it is not needed; or,
   supply the monochrome icon in the drawable defined by the android:roundIcon
   and android:icon attribute.

   For example, if android:roundIcon and android:icon are both in the
   manifest, a launcher might choose to use android:roundIcon over
   android:icon to display the adaptive app icon. Therefore, your themed
   application iconwill not show if your monochrome attribute is not also
   specified in android:roundIcon.

/Users/james/dev/NearScheduleWidget/app/src/main/java/com/example/nearschedulewidget/widget/CalendarWidgetUpdater.kt:79: Warning: Use the KTX extension function String.toUri instead? [UseKtx]
            data = Uri.parse("widget://update/$appWidgetId")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/java/com/example/nearschedulewidget/widget/CalendarWidgetUpdater.kt:79: Warning: Use the KTX extension function String.toUri instead? [UseKtx]
            data = Uri.parse("widget://update/$appWidgetId")
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/java/com/example/nearschedulewidget/SettingsActivity.kt:42: Warning: Use the KTX extension function SharedPreferences.edit instead? [UseKtx]
            prefs.edit().putLong("update_interval", selectedInterval).apply()
            ~~~~~~~~~~~~

   Explanation for issues of type "UseKtx":
   The Android KTX libraries decorates the Android platform SDK as well as
   various libraries with more convenient extension functions available from
   Kotlin, allowing you to use default parameters, named parameters, and
   more.

   Available options:

   **remove-defaults** (default is true):
   Whether to skip arguments that match the defaults provided by the extension.

   Extensions often provide default values for some of the parameters. For example:
   ```kotlin
   fun Path.readLines(charset: Charset = Charsets.UTF_8): List<String> { return Files.readAllLines(this, charset) }
   ```
   This lint check will by default automatically omit parameters that match the default, so if your code was calling ```kotlin
   Files.readAllLines(file, Charset.UTF_8)
   ```
   lint would replace this with
   ```kotlin
   file.readLines()
   ```
   rather than
   ```kotlin
   file.readLines(Charset.UTF_8
   ```
   You can turn this behavior off using this option.

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UseKtx">
           <option name="remove-defaults" value="true" />
       </issue>
   </lint>
   ```

   **require-present** (default is true):
   Whether to only offer extensions already available.

   This option lets you only have lint suggest extension replacements if those extensions are already available on the class path (in other words, you're already depending on the library containing the extension method.)

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UseKtx">
           <option name="require-present" value="true" />
       </issue>
   </lint>
   ```

/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/activity_main.xml:11: Warning: Missing contentDescription attribute on image [ContentDescription]
    <ImageView
     ~~~~~~~~~

   Explanation for issues of type "ContentDescription":
   Non-textual widgets like ImageViews and ImageButtons should use the
   contentDescription attribute to specify a textual description of the widget
   such that screen readers and other accessibility tools can adequately
   describe the user interface.

   Note that elements in application screens that are purely decorative and do
   not provide any content or enable a user action should not have
   accessibility content descriptions. In this case, set their descriptions to
   @null. If your app's minSdkVersion is 16 or higher, you can instead set
   these graphical elements' android:importantForAccessibility attributes to
   no.

   Note that for text fields, you should not set both the hint and the
   contentDescription attributes since the hint will never be shown. Just set
   the hint.

   https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases

/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/activity_main.xml:20: Warning: Hardcoded string "Near Schedule Widget", should use @string resource [HardcodedText]
        android:text="Near Schedule Widget"
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/activity_main.xml:28: Warning: Hardcoded string "一个简洁的桌面日程小部件", should use @string resource [HardcodedText]
        android:text="一个简洁的桌面日程小部件"
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/activity_main.xml:44: Warning: Hardcoded string "需要日历权限", should use @string resource [HardcodedText]
            android:text="需要日历权限"
            ~~~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/activity_main.xml:52: Warning: Hardcoded string "应用需要获取您的日历读取权限，才能将日程显示在小部件上。", should use @string resource [HardcodedText]
            android:text="应用需要获取您的日历读取权限，才能将日程显示在小部件上。"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/activity_main.xml:62: Warning: Hardcoded string "授予权限", should use @string resource [HardcodedText]
            android:text="授予权限"
            ~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/activity_main.xml:72: Warning: Hardcoded string "设置更新频率", should use @string resource [HardcodedText]
        android:text="设置更新频率"
        ~~~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/activity_main.xml:80: Warning: Hardcoded string "手动刷新小部件", should use @string resource [HardcodedText]
        android:text="手动刷新小部件"
        ~~~~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/activity_main.xml:86: Warning: Hardcoded string "如何使用：长按桌面 -> 添加小部件 -> 找到 Near Schedule", should use @string resource [HardcodedText]
        android:text="如何使用：长按桌面 -> 添加小部件 -> 找到 Near Schedule"
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/activity_settings.xml:11: Warning: Hardcoded string "更新频率", should use @string resource [HardcodedText]
        android:text="更新频率"
        ~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/activity_settings.xml:25: Warning: Hardcoded string "5 分钟", should use @string resource [HardcodedText]
            android:text="5 分钟" />
            ~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/activity_settings.xml:31: Warning: Hardcoded string "10 分钟", should use @string resource [HardcodedText]
            android:text="10 分钟" />
            ~~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/activity_settings.xml:37: Warning: Hardcoded string "15 分钟", should use @string resource [HardcodedText]
            android:text="15 分钟" />
            ~~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/activity_settings.xml:43: Warning: Hardcoded string "30 分钟", should use @string resource [HardcodedText]
            android:text="30 分钟" />
            ~~~~~~~~~~~~~~~~~~~~
/Users/james/dev/NearScheduleWidget/app/src/main/res/layout/widget_calendar.xml:23: Warning: Hardcoded string "Refresh", should use @string resource [HardcodedText]
        android:contentDescription="Refresh" />
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "HardcodedText":
   Hardcoding text attributes directly in layout files is bad for several
   reasons:

   * When creating configuration variations (for example for landscape or
   portrait) you have to repeat the actual text (and keep it up to date when
   making changes)

   * The application cannot be translated to other languages by just adding
   new translations for existing string resources.

   There are quickfixes to automatically extract this hardcoded string into a
   resource lookup.

0 errors, 25 warnings
